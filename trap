#!/usr/bin/env python

import sys
import math
import os.path
import cPickle

from copy import copy
from optparse import Option, OptionParser, OptionValueError

from lib.region import Region
from lib.traceparser import TraceParser

VERSION = 2.0

def check_region(option, opt, value):
	values = value.split('+')
	regions = []

	for value in values:
		try:
			(dimensions, position) = value.split('@')
			(width, height) = dimensions.split('x')
			(x, y) = position.split(',')

			width = float(width)
			height = float(height)
			x = float(x)
			y = float(y)

			regions.append((x, y, width, height))
		except:
			raise OptionValueError('option %s: invalid region: %r' % (opt, value))

	return regions

class TrapOption(Option):
	TYPES = Option.TYPES + ('region',)
	TYPE_CHECKER = copy(Option.TYPE_CHECKER)
	TYPE_CHECKER['region'] = check_region

def main():
	parser = OptionParser(usage='Usage: %prog [OPTION] FILE...',
	                      version='%prog ' + '%.1f' % VERSION,
	                      option_class=TrapOption)

	parser.add_option('-o', '--output', help='output file suffix (default: .gpi)')
	parser.add_option('-r', '--region', help='the region to inspect (required, WxH@X,Y)', type='region')
	parser.add_option('-t', '--time', type='float', help='simulation time (default: 60 seconds)')
	parser.add_option('-T', '--trust', type='int', help='required trust value (default: 1)')

	parser.set_defaults(output='.gpi',
	                    region=None,
	                    time=60.0,
	                    trust=1)

	options, args = parser.parse_args()

	if options.region == None:
		print 'trap: error: region is a required parameter'
		parser.print_help()
		sys.exit(1)

	if len(args) < 1:
		parser.print_help()
		sys.exit(2)

	for file in args:
		if os.path.exists(file) or os.path.exists(file + '.pickle'):
			print "Trapping %s..." % file
			trap(file, options)

def trap(file, options):
	if os.path.exists(file + '.pickle'):
		with open(file + '.pickle') as f:
			(nodes, vs_types) = cPickle.load(f)
	else:
		with open(file) as f:
			tp = TraceParser()
			tp.parse(f)

			nodes = tp.get_nodes()
			vs_types = sorted(list(tp.vs_types))

		with open(file + '.pickle', 'wb') as f:
			cPickle.dump((nodes, vs_types), f, cPickle.HIGHEST_PROTOCOL)

	graph, delay_graph = analyze(nodes, vs_types, options)

	with open(file + options.output, 'w') as f:
		plot(f, graph, file)

	with open(file + '.delay' + options.output, 'w') as f:
		plot_delay(f, delay_graph, file)

def analyze(nodes, vs_types, options):
	vr = {} # Vehicles in Region
	avr = {} # Active Vehicles in Region
	graph = {}

	analyze_intersections(nodes, options.region)
	vr = analyze_vr(nodes)
	vr_times = set(vr.keys())

	num_types = len(vs_types)

	avr = analyze_num_types(nodes, num_types)
	times = vr_times.copy()
	times.update(avr.keys())
	times = sorted(list(times))
	key = '%d Messages' % num_types
	graph[key] = analyze_graph(times, vr, avr, options.time)

	delay = analyze_delay(nodes, num_types, options.time)
	delay_graph = analyze_delay_graph(delay)

	total_delay = 0.0
	total_vehicle = 0
	for d in delay:
		if d != float('inf'):
			if d > 0.0:
				total_delay += d
			total_vehicle += 1
	average_delay = total_delay / total_vehicle

	print 'Average Delay: %.2fs (%f / %d)' % (average_delay, total_delay, total_vehicle)

	return graph, delay_graph

def analyze_intersections(nodes, regions):
	for node in nodes:
		for region in regions:
			enter, exit = node.intersect(region)
			node.enter = enter
			node.exit = exit
			if enter != None:
				break

def analyze_vr(nodes):
	vr = {}

	for node in nodes:
		if node.enter != None:
			vr[node.enter] = vr.get(node.enter, 0) + 1
			vr[node.exit] = vr.get(node.exit, 0) - 1

	return vr

def analyze_avr(nodes, vs_type, trust):
	avr = {}

	for node in nodes:
		if node.enter != None:
			if node.has_trust_at(node.enter, vs_type, trust):
				avr[node.enter] = avr.get(node.enter, 0) + 1
				avr[node.exit] = avr.get(node.exit, 0) - 1
			elif node.has_trust_at(node.exit, vs_type, trust):
				t_trust = node.packet_times[vs_type][trust - 1]
				avr[t_trust] = avr.get(t_trust, 0) + 1
				avr[node.exit] = avr.get(node.exit, 0) - 1

	return avr

def analyze_num_types(nodes, types):
	avr = {}

	for node in nodes:
		if node.enter != None:
			enter_types = node.unique_types_at(node.enter)
			exit_types = node.unique_types_at(node.exit)

			if enter_types <= types <= exit_types:
				t1 = node.unique_types_when(types)
				t2 = node.unique_types_when(types + 1)

				if t1 < node.enter:
					t1 = node.enter
				if t2 > node.exit:
					t2 = node.exit

				avr[t1] = avr.get(t1, 0) + 1
				avr[t2] = avr.get(t2, 0) - 1

	return avr

def analyze_delay(nodes, types, time):
	delays = []

	for node in nodes:
		if node.enter != None:
			if node.enter < time - 10 and node.exit > 10:
				t = node.unique_types_when(types)
				delay = t - node.enter
				delays.append(delay)

	return delays

def analyze_graph(times, vr, avr, time):
	graph = []
	total = 0
	active = 0

	for t in times:
		if t > time:
			break

		if vr.has_key(t):
			total += vr[t]

		if avr.has_key(t):
			active += avr[t]

		if total == 0:
			graph.append((t, 0.0))
		else:
			graph.append((t, 1.0 * active / total))

	return graph

def analyze_delay_graph(delays):
	graph = []

	t_graph = {}
	for delay in delays:
		if delay == float('inf'):
			delay = 'inf'
		elif delay < 0:
			delay = '<0'
		else:
			delay = int(delay) + 1

		t_graph[delay] = t_graph.get(delay, 0) + 1

	keys = sorted(t_graph.keys())

	if '<0' in keys:
		graph.append(('<0', t_graph['<0']))
		keys.remove('<0')

	prev_key = None
	for key in keys:
		if prev_key != None and type(key) == int:
			for i in range(prev_key + 1, key):
				graph.append((i, 0))
		prev_key = key

		graph.append((key, t_graph[key]))

	return graph

def plot(f, graph, file):
	keys = sorted(graph.keys())
	xrange = max([last_interesting_time(graph[key]) for key in keys])

	f.write("set title '%s Regional Delivery'\n" % os.path.basename(file))
	f.write("set style data lines\n")
	f.write("set xlabel 'Time (s)'\n")
	f.write("set ylabel 'Percentage'\n")
	f.write("set xrange[0:%d]\n" % math.ceil(xrange))
	f.write("set yrange[0:1]\n")
	f.write("set ytics 0.1\n")

	plot_commands = ["'-' t '%s'" % key for key in keys]
	f.write("plot %s\n" % ', '.join(plot_commands))

	for key in keys:
		for g in graph[key]:
			f.write('%f %f\n' % g)
		f.write('e\n')

def plot_delay(f, graph, file):
	f.write("set title '%s Delays'\n" % os.path.basename(file))
	f.write("set style data histograms\n")
	f.write("set style fill solid\n")
	f.write("set xlabel 'Delay (s)'\n")
	f.write("set ylabel 'Vehicles'\n")
	f.write("set nokey\n")
	f.write("plot '-' using 2:xtic(1)\n")

	for g in graph:
		f.write('%s %d\n' % g)
	f.write('e\n')

def last_interesting_time(g):
	last_val = g[-1][1]
	i = len(g) - 1
	while i >= 0 and g[i][1] == last_val:
		i -= 1
	return g[i][0]

if __name__ == '__main__':
	main()
